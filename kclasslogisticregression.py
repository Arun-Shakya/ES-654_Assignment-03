# -*- coding: utf-8 -*-
"""kClassLogisticRegression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bW5SkbY-jhamuQTFcmGMpdbo_okaNH77
"""

import autograd.numpy as np
import pandas as pd
from autograd import grad
import matplotlib.pyplot as plt
import seaborn as sns
from autograd import grad
from sklearn import datasets
from sklearn.model_selection import train_test_split,KFold
from sklearn.utils import shuffle
import sklearn

class MultiLogisticRegression():
    def __init__(self,epochs=50,lr=0.02,n_classes=2):
        self.coef=None
        self.classes=n_classes
        self.lr=lr
        self.epochs=epochs

    def sigmoid(x):
      return 1/(1+np.exp(-x))

    def fit_autograd(self,X,y):
        self.X=X
        self.y=y
        self.X=sklearn.preprocessing.normalize(self.X)
        X=self.X
        self.coef=np.ones(len(self.X[0])*self.classes).reshape(len(self.X[0]),self.classes)

        def cost(coef):
          X_coef=np.matmul(X_,coef)
          delta=np.exp(X_coef)
          delta_=delta.sum(axis=1)
          delta=delta/delta_[:,np.newaxis]
          ans=0
          for i in range(len(y_)):
            ans+=np.log(delta[i,y_[i]])
          return -1*ans

        gradient=grad(cost)
        X_=self.X
        y_=self.y

        for i in range(self.epochs):
          self.coef-=self.lr*gradient(self.coef)

    def predict(self,X):
      X_test=X[:]
      X_test=sklearn.preprocessing.normalize(X_test)
      X_coef=np.matmul(X_test,self.coef)
      d=np.exp(X_coef)
      d_=d.sum(axis=1)
      d=d/d_[:,np.newaxis]
      return d
    
    def Accuracy(self,y,y_hat):
      y_final=[]
      for i in range(len(y_hat)):
        max_ind=0
        for j in range(len(y_hat[0])):
          if y_hat[i,j]>y_hat[i,max_ind]:
            max_ind=j
        y_final.append(max_ind)
      
      temp=0
      for i in range(len(y)):
        if y_final[i]==y[i]:
          temp+=1
      return temp*100/len(y)

data = datasets.load_digits()
X = data.data
y = data.target
X, y = shuffle(X, y)
folds = KFold(n_splits=4)
folds.get_n_splits(X)

fold_id=1
tot = 0
MLR = MultiLogisticRegression(n_classes=10)
for train_index, test_index in folds.split(X):
    X_train, X_test = X[train_index], X[test_index]
    y_train, y_test = y[train_index], y[test_index]
    MLR.fit_autograd(X_train,y_train) 
    y_hat = MLR.predict(X_test)
    print("accuracy for fold:",fold_id,MLR.Accuracy(y_test,y_hat))
    tot += MLR.Accuracy(y_test,y_hat)
    fold_id+=1
print("Overall accuracy for model" ,tot/4)

